{"version":3,"sources":["components/BrailleInput.js","pages/App.js","serviceWorker.js","index.js"],"names":["BrailleInput","inputChange","useState","state","setState","handleInputChange","event","target","newState","id","checked","type","onChange","App","currentBraillePattern","setCurrentBraillePattern","word","setWord","computedBrailleDotPattern","brailleDotPattern","map","isSelected","index","filter","elem","join","className","data","onClick","patternData","console","log","slice","Fragment","key","src","imageBase64","meanings","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"suxXA2BeA,G,YAxBM,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,YAAiB,EACfC,mBAAS,EAAC,GAAO,GAAO,GAAO,GAAO,GAAO,IAD9B,mBAClCC,EADkC,KAC3BC,EAD2B,KAGjCC,EAAoB,SAACC,GAC1B,IAAIC,EAASD,EAAMC,OACfC,EAAQ,YAAOL,GACnBK,EAASD,EAAOE,GAAG,GAAKF,EAAOG,QAE/BN,EAASI,GACTP,EAAYO,IAGb,OACC,yBAAKC,GAAG,gBACP,2BAAOE,KAAK,WAAWF,GAAG,IAAIC,QAASP,EAAM,GAAIS,SAAUP,IAC3D,2BAAOM,KAAK,WAAWF,GAAG,IAAIC,QAASP,EAAM,GAAIS,SAAUP,IAC3D,2BAAOM,KAAK,WAAWF,GAAG,IAAIC,QAASP,EAAM,GAAIS,SAAUP,IAC3D,2BAAOM,KAAK,WAAWF,GAAG,IAAIC,QAASP,EAAM,GAAIS,SAAUP,IAC3D,2BAAOM,KAAK,WAAWF,GAAG,IAAIC,QAASP,EAAM,GAAIS,SAAUP,IAC3D,2BAAOM,KAAK,WAAWF,GAAG,IAAIC,QAASP,EAAM,GAAIS,SAAUP,O,OC0B/CQ,MA3Cf,WAAgB,IAAD,EAC0CX,mBAAS,IADnD,mBACTY,EADS,KACcC,EADd,OAEQb,mBAAS,IAFjB,mBAETc,EAFS,KAEHC,EAFG,KAQRC,EAA4B,WACjC,IAAIC,EAAoBL,EACtBM,KAAI,SAACC,EAAYC,GAAb,OAAuBD,EAAaC,EAAQ,EAAI,MACpDC,QAAO,SAAAC,GAAI,MAAa,KAATA,KACfC,KAAK,IACP,MAA6B,KAAtBN,EAA2BA,EAAoB,KAWvD,OACC,yBAAKO,UAAU,OACd,kBAAC,EAAD,CAAczB,YAtBE,SAAC0B,GAClBZ,EAAyBY,MAsBxB,8CAAoBT,KACpB,6BACC,4BAAQU,QAbQ,WAClB,IAAIC,EAAcF,EAAKJ,QAAO,SAAAC,GAAI,OAAIA,EAAI,aAAmBN,OAA6B,GAC1FY,QAAQC,IAAIF,GACZZ,EAAQ,GAAD,mBAAKD,GAAL,CAAWa,OAUhB,UACA,4BAAQD,QATQ,WAAQX,EAAQD,EAAKgB,MAAM,GAAI,MAS/C,UACA,4BAAQJ,QATO,WAAQX,EAAQ,MAS/B,UAED,yBAAKR,GAAG,eACNO,EAAKI,KAAI,SAACI,EAAMF,GAAP,OAAiB,kBAAC,IAAMW,SAAP,CAAgBC,IAAKZ,GAC/C,yBAAKa,IAAK,0BAA4BX,EAAKY,cAC3C,8BAAOZ,EAAKa,SAAS,2BC7BNC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.b7af668c.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport \"../scss/BrailleInput.scss\"\r\n\r\nconst BrailleInput = ({inputChange}) => {\r\n\tlet [state, setState] = useState([false, false, false, false, false, false]);\r\n\r\n\tconst handleInputChange = (event) => {\r\n\t\tlet target = event.target;\r\n\t\tlet newState = [...state];\r\n\t\tnewState[target.id-1] = target.checked;\r\n\r\n\t\tsetState(newState);\r\n\t\tinputChange(newState);\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div id=\"brailleInput\">\r\n\t\t\t<input type=\"checkbox\" id=\"1\" checked={state[0]} onChange={handleInputChange}/>\r\n\t\t\t<input type=\"checkbox\" id=\"2\" checked={state[1]} onChange={handleInputChange}/>\r\n\t\t\t<input type=\"checkbox\" id=\"3\" checked={state[2]} onChange={handleInputChange}/>\r\n\t\t\t<input type=\"checkbox\" id=\"4\" checked={state[3]} onChange={handleInputChange}/>\r\n\t\t\t<input type=\"checkbox\" id=\"5\" checked={state[4]} onChange={handleInputChange}/>\r\n\t\t\t<input type=\"checkbox\" id=\"6\" checked={state[5]} onChange={handleInputChange}/>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default BrailleInput;","import React, { useState } from 'react';\nimport '../scss/App.scss';\nimport BrailleInput from \"../components/BrailleInput\";\nimport data from \"../data.json\"\n\nfunction App() {\n\tlet [currentBraillePattern, setCurrentBraillePattern] = useState([]);\n\tlet [word, setWord] = useState([]);\n\n\tlet inputChange = (data) => {\n\t\tsetCurrentBraillePattern(data)\n\t}\n\n\tconst computedBrailleDotPattern = () => {\n\t\tlet brailleDotPattern = currentBraillePattern\n\t\t\t.map((isSelected, index) => isSelected ? index + 1 : \"\")\n\t\t\t.filter(elem => elem !== \"\")\n\t\t\t.join(\"\");\n\t\treturn brailleDotPattern !== \"\" ? brailleDotPattern : \"0\";\n\t}\n\n\tconst insertWord = () => {\n\t\tlet patternData = data.filter(elem => elem[\"dotPattern\"] === computedBrailleDotPattern())[0];\n\t\tconsole.log(patternData);\n\t\tsetWord([...word, patternData]);\n\t}\n\tconst deleteWord = () => { setWord(word.slice(0, -1)); }\n\tconst clearWord = () => { setWord([]); }\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<BrailleInput inputChange={inputChange} />\n\t\t\t<span>Dot pattern: {computedBrailleDotPattern()}</span>\n\t\t\t<div>\n\t\t\t\t<button onClick={insertWord}>Insert</button>\n\t\t\t\t<button onClick={deleteWord}>Delete</button>\n\t\t\t\t<button onClick={clearWord}>Clear</button>\n\t\t\t</div>\n\t\t\t<div id=\"brailleText\">\n\t\t\t\t{word.map((elem, index) => <React.Fragment key={index}>\n\t\t\t\t\t<img src={\"data:image/png;base64, \" + elem.imageBase64} />\n\t\t\t\t\t<span>{elem.meanings[\"english braille\"]}</span>\n\t\t\t\t</React.Fragment>)}\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './scss/index.scss';\nimport App from './pages/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}